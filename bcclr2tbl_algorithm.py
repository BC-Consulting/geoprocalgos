# -*- coding: utf-8 -*-
"""
/***************************************************************************
 bcclr2tbl3
                           A QGIS Processing algorithm
             Style a one-band raster layer with a Surfer .clr file

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-05-19
        copyright            : (C) 2019-2023 by GeoProc.com
        email                : info@geoproc.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 3 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
WARNING: code formatting does not follow pycodestyle recommendations
"""

__author__ = 'GeoProc.com'
__date__ = '2019-05-19'
__copyright__ = '(C) 2019-2023 by GeoProc.com'
__revision__ = '$Format:%H$'

import os
import codecs
from qgis.PyQt.QtGui import QIcon
from qgis.core import (QgsProcessingAlgorithm,
                       QgsRasterBandStats,
                       QgsProcessingUtils)

from .setparams import set_param
from .HelpbcA import help_bcclr2tbl
from .QgsBcUtils import style_raster, save_colormap, check_oneband

is_dependencies_satisfied = True

#-----------------------------------------------------------------------------------------
plugin_path = os.path.dirname(__file__)

the_url = 'https://www.geoproc.com/be/bcclr2tbl3.htm'
help_string = help_bcclr2tbl
the_tags = ['colour','ramp','import','one band','raster','clr','surfer','golden software']
#-----------------------------------------------------------------------------------------

class bcclr2tblAlgorithm(QgsProcessingAlgorithm):
    ''' Processing wrapper. '''
    #
    THE_LAYER = 'THE_LAYER'
    THE_CLR   = 'THE_CLR'
    OUTPUT    = 'OUTPUT'
    DEP       = 'DEP'

    _default_output = ''

    _ico = 'bcclr2tbl'
    _the_strings = {"ALGONAME":"Style with .clr",
                    "ERR":"ERROR",
                    "ERR_DEP":"numpy and pandas are required to run this algorithm",
                    "DEP_LST":"numpy, pandas",
                    "ERR_RASTER":"ERROR: Input is not a raster!",
                    "ERR_ONEB":"ERROR: Input is not a one-band raster!",
                    "ERR_NOCLR":"ERROR: clr file is not a Surfer clr version 3 file!"
                   }

    _pstr = ['Input one-band raster',
             'Surfer .clr file',
             'Output QGIS colour map file', 'Colour map files (*.txt)', 'All files (*.*)']

    def __init__(self):
        super().__init__()
    #-------------------------------------------------------------------------------------

    def _define_params(self):
        ''' Define parameters needed. '''
        #
        #       [0] < 100  : "normal" parameter
        # 100 < [0] < 1000 : Advanced Parameter
        #       [0] > 1000 : Output parameter
        self.the_params = {
           self.THE_LAYER:    [1,self._pstr[0],'RasterLayer',{},False],
           self.THE_CLR:      [2,self._pstr[1],'File',{'ext':'clr'},False],
           self.OUTPUT:       [1001,self._pstr[2],'FileDestination',
                               {'defaultValue':'','FILTER':self._pstr[3]},True]
        }
        self._err_param = {self.DEP: [1,self._the_strings["ERR_DEP"],'String',
                           {'defaultValue':self._the_strings["DEP_LST"]},False]}
        self.error = ''
    #-------------------------------------------------------------------------------------

    def _check_clr(self, clr):
        ''' Check that we have the correct clr. '''
        #
        with codecs.open(clr, 'r', 'utf-8') as fi:
            buff = fi.readline()
        ar = buff.split()
        #
        return ar[1] == '3' and ar[0] == 'ColorMap'
    #-------------------------------------------------------------------------------------

    def initAlgorithm(self, config):
        ''' Here we define the inputs and output of the algorithm. '''
        #
        self._define_params()
        if is_dependencies_satisfied:
            # Prepare all parameters needed
            for param in sorted(self.the_params, key=self.the_params.__getitem__):
                b = self.the_params[param][0]
                qparam = set_param(param, self.the_params)
                if qparam != None:
                    if b < 100:
                        self.addParameter(qparam)
                    elif b < 1000:
                        self.addParameter((qparam))
                    else:
                        self.addParameter(qparam, True)

        else:
            qparam = set_param(self.DEP, self._err_param)
            self.addParameter(qparam)
    #-------------------------------------------------------------------------------------

    def processAlgorithm(self, parameters, context, feedback):
        ''' Here is where the processing itself takes place. '''
        #
        if not is_dependencies_satisfied:
            return {}

        feedback.pushInfo('Loading input data...')
        # Get input raster and check it's one-band
        the_layer = self.parameterAsRasterLayer(parameters, self.THE_LAYER, context)
        #
        if not check_oneband(the_layer):
            self._error = self._the_strings["ERR_ONEB"]
            return {}

        # Get .clr file and check it
        clr = self.parameterAsFile(parameters, self.THE_CLR, context)
        if not self._check_clr(clr):
            self._error = self._the_strings["ERR_NOCLR"]
            return {}
        feedback.setProgress(10.)

        # Get raster min/max values
        feedback.pushInfo('Computing band statistics... (may take a very loooong time!!)')
        provider = the_layer.dataProvider()
        ext1     = the_layer.extent()
        stats    = provider.bandStatistics(1, QgsRasterBandStats.All, ext1, 0)
        minv     = stats.minimumValue
        maxv     = stats.maximumValue
        d        = (maxv - minv) / 100.
        feedback.setProgress(70.)

        # Scale percentages to raster values
        feedback.pushInfo('Scaling...')
        with codecs.open(clr, 'r', 'utf-8') as fi:
            buff = fi.readlines()
        # 0.00000000000000000  200  215  133  255
        ar = []
        for e in buff[2:]:
            br = e[:-1].split()
            v = float(br[0]) * d + minv
            ar.append([v, int(br[1]), int(br[2]), int(br[3]), int(br[4])])
            if br[0][:3] == '100':
                # end of colour ramp
                break
        feedback.setProgress(80.)

        # Style raster
        feedback.pushInfo('Styling...')
        _ = style_raster(ar, the_layer)
        feedback.setProgress(90.)

        # Get output file name
        feedback.pushInfo('Saving...')
        output_file = self.parameterAsFileOutput(parameters, self.OUTPUT, context)
        if output_file == '':
            of = os.path.splitext(the_layer.source())[0] + '.txt'
            output_file = os.path.join(QgsProcessingUtils.tempFolder(), of)

        # Save QGIS colour ramp file
        _ = save_colormap(ar, output_file)
        feedback.setProgress(100.)

        feedback.pushInfo('Done!')
        return {self.OUTPUT:output_file}
    #-------------------------------------------------------------------------------------

    def get_error(self):
        ''' Return the error value. '''
        #
        return self.tr(self._error)
    #-------------------------------------------------------------------------------------

    def icon(self):
        ''' Returns a QIcon for the algorithm. '''
        #
        return QIcon(os.path.join(os.path.join(plugin_path, 'res', self._ico+'.svg')))
    #-------------------------------------------------------------------------------------

    def svgIconPath(self):
        ''' Returns a path to an SVG version of the algorithm's icon. '''
        #
        return QIcon(os.path.join(os.path.join(plugin_path, 'res', self._ico+'.svg')))
    #-------------------------------------------------------------------------------------

    def helpUrl(self):
        ''' Returns a url pointing to the algorithm's help page. '''
        #
        return the_url
    #-------------------------------------------------------------------------------------

    def shortHelpString(self):
        ''' Returns a localised short helper string for the algorithm. '''
        #
        return self.tr(help_string)
    #-------------------------------------------------------------------------------------

    def name(self):
        '''
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        '''
        return 'bcclr2tbl3'
    #-------------------------------------------------------------------------------------

    def displayName(self):
        '''
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        '''
        return self.tr(self._the_strings["ALGONAME"])
    #-------------------------------------------------------------------------------------

    def tags(self):
        return self.tr(the_tags)
    #-------------------------------------------------------------------------------------

    def group(self):
        '''
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        '''
        return str(self.groupId()).capitalize()
    #-------------------------------------------------------------------------------------

    def groupId(self):
        '''
        One of: composer, layer, query, raster, survey, vector
        '''
        return 'raster'
    #-------------------------------------------------------------------------------------

    def tr(self, string):
        ''' No translation of strings. '''
        #
        return string
    #-------------------------------------------------------------------------------------

    def createInstance(self):
        ''' Creates a new instance of the algorithm class. '''
        #
        return bcclr2tblAlgorithm()
    #-------------------------------------------------------------------------------------