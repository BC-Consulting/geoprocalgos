# -*- coding: utf-8 -*-
"""
/***************************************************************************
 bcSwapYZ3
                           A QGIS Processing algorithm
              From a 2D layer create a 3D layer with Z as Y and Y = 0.0

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-05-19
        copyright            : (C) 2019-2023 by GeoProc.com
        email                : info@geoproc.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 3 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
WARNING: code formatting does not follow pycodestyle recommendations
"""

__author__ = 'GeoProc.com'
__date__ = '2019-05-19'
__copyright__ = '(C) 2019-2023 by GeoProc.com'
__revision__ = '$Format:%H$'

import os
import re
from qgis.PyQt.QtGui import QIcon
from qgis.core import (QgsProcessingAlgorithm, QgsProcessing,
                       QgsFeature,
                       QgsGeometry,
                       QgsWkbTypes,
                       QgsProcessingException,
                       QgsFeatureSink)

from .setparams import set_param
from .HelpbcA import help_bcSwapYZ

is_dependencies_satisfied = True

#-----------------------------------------------------------------------------------------
plugin_path = os.path.dirname(__file__)

the_url = 'https://www.geoproc.com/be/bcSwapYZ3.htm'
help_string = help_bcSwapYZ
the_tags = ['3D', '2D', 'swap', 'coordinates', 'y', 'z', 'vector']
#-----------------------------------------------------------------------------------------

class bcSwapYZAlgorithm(QgsProcessingAlgorithm):
    ''' Processing wrapper. '''
    #
    THE_LAYER = 'THE_LAYER'
    Y_VALUE   = 'Y_VALUE'
    OUTPUT    = 'OUTPUT'
    DEP       = 'DEP'

    _default_output = ''

    _ico = 'bcSwapYZ'
    _the_strings = {"ALGONAME":"Swap Y and Z coords",
                    "ERR":"ERROR",
                    "ERR_DEP":"numpy and pandas are required to run this algorithm",
                    "DEP_LST":"numpy, pandas",
                    "ERR_VECTOR":"ERROR: Input is not a vector!",
                   }

    _pstr = ['Input vector',
             'Y value',
             'Output vector file', 'Vector files (*.shp)', 'All files (*.*)']

    def __init__(self):
        super().__init__()
        #
        self._wktdef = {'Point': self._wkt_pt,
                        'MultiPoint': self._wkt_mt,
                        'LineString': self._wkt_ll,
                        'MultiLineString': self._wkt_ml,
                        'Polygon': self._wkt_py,
                        'MultiPolygon': self._wkt_mp}
        self._yval = 0.0
    #-------------------------------------------------------------------------------------

    def _define_params(self):
        ''' Define parameters needed. '''
        #
        #       [0] < 100  : "normal" parameter
        # 100 < [0] < 1000 : Advanced Parameter
        #       [0] > 1000 : Output parameter
        self.the_params = {
           self.THE_LAYER:    [1,self._pstr[0],'VectorLayer',
                               {'types':[QgsProcessing.TypeVectorAnyGeometry]},False],
           self.Y_VALUE:      [2,self._pstr[1],'NumberD',{'defaultValue':0.0},True],
           self.OUTPUT:       [1001,self._pstr[2],'SINK',
                               {'type':QgsProcessing.TypeVectorAnyGeometry},True]
        }
        self._err_param = {self.DEP: [1,self._the_strings["ERR_DEP"],'String',
                           {'defaultValue':self._the_strings["DEP_LST"]},False]}
    #-------------------------------------------------------------------------------------

    def _wkt_rep(self, wkt, ree):
        ''' Replace '''
        #
        s = re.sub(ree, r'\1', wkt)
        s = s.replace(', ', ',|')
        s = s.replace(' ', ' %.4f ' % self._yval)
        return s.replace(',|', ', ')
    #-----------------------------------------------------------------------------------------

    def _wkt_pt(self, wkt):
        ''' Process point geometry '''
        #
        #Point (634305.22138125263154507 9092749.85518037341535091)
        br = wkt.split(" ")
        br[1] = br[1].replace('(','')
        br[2] = br[2].replace(')','')
        return "PointZ (%s 0.0 %s)" % (str(br[1]), str(br[2]))
    #-----------------------------------------------------------------------------------------

    def _wkt_mt(self, wkt):
        ''' Process multipoint geometry '''
        #MultiPoint ((73.3 -18.2), (72.7 -0.5, 73.3 -18.2, 72.7 -0.5))
        #
        ree = re.compile(r'MultiPoint \((.*?)\)')
        return "MultiPointZ (%s)" % self._wkt_rep(wkt, ree)
    #-------------------------------------------------------------------------------------

    def _wkt_ll(self, wkt):
        ''' Process line geometry '''
        #LineString (73.3 -18.2, 72.7 -0.5, 73.3 -18.2, 72.7 -0.5)
        #
        ree = re.compile(r'LineString \((.*?)\)')
        return "MultiLineStringZ ((%s))" % self._wkt_rep(wkt, ree)
    #-------------------------------------------------------------------------------------

    def _wkt_ml(self, wkt):
        ''' Process multiline geometry '''
        #MultiLineString ((73.3 -18.2, 72.7 -0.5),(73.3 -18.2, 72.7 -0.5))
        #
        ree = re.compile(r'MultiLineString \((\(.*?\))\)')
        return "MultiLineStringZ (%s)" % self._wkt_rep(wkt, ree)
    #-------------------------------------------------------------------------------------

    def _wkt_py(self, wkt):
        ''' Process polygon geometry '''
        #Polygon ((73.3 -18.2, 72.7 -0.5),(73.3 -18.2, 72.7 -0.5))
        #
        ree = re.compile(r'Polygon \((.*?)\)')
        return "MultiPolygonZ ((%s))" % self._wkt_rep(wkt, ree)
    #-------------------------------------------------------------------------------------

    def _wkt_mp(self, wkt):
        ''' Process multipolygon geometry '''
        #MultiPolygon (((73.3 -18.2, 72.7 -0.5),(73.3 -18.2, 72.7 -0.5)))
        #
        ree = re.compile(r'MultiPolygon \((\(.*?\))\)')
        return "MultiPolygonZ (%s)" % self._wkt_rep(wkt, ree)
    #-------------------------------------------------------------------------------------

    def initAlgorithm(self, config):
        ''' Here we define the inputs and output of the algorithm. '''
        #
        self._define_params()
        if is_dependencies_satisfied:
            # Prepare all parameters needed
            for param in sorted(self.the_params, key=self.the_params.__getitem__):
                b = self.the_params[param][0]
                qparam = set_param(param, self.the_params)
                if qparam != None:
                    if b < 100:
                        self.addParameter(qparam)
                    elif b < 1000:
                        self.addParameter((qparam))
                    else:
                        self.addParameter(qparam, True)

        else:
            qparam = set_param(self.DEP, self._err_param)
            self.addParameter(qparam)
    #-------------------------------------------------------------------------------------

    def processAlgorithm(self, parameters, context, feedback):
        ''' Here is where the processing itself takes place. '''
        #
        if not is_dependencies_satisfied:
            return {}

        # Input layer
        the_layer = self.parameterAsSource(parameters, self.THE_LAYER, context)
        if the_layer is None:
            raise QgsProcessingException(self.invalidSourceError(parameters,
                                                                 self.THE_LAYER))
        # Output geometry
        if QgsWkbTypes.geometryType(the_layer.wkbType()) == QgsWkbTypes.PointGeometry:
            output_wkb = QgsWkbTypes.MultiPointZ
        elif QgsWkbTypes.geometryType(the_layer.wkbType()) == QgsWkbTypes.LineGeometry:
            output_wkb = QgsWkbTypes.MultiLineStringZ
        elif QgsWkbTypes.geometryType(the_layer.wkbType()) == QgsWkbTypes.PolygonGeometry:
            output_wkb = QgsWkbTypes.MultiPolygonZ
        else:
            raise QgsProcessingException(self.invalidSourceError(parameters,
                                                                 self.THE_LAYER))
        # Y-value
        self._yval = self.parameterAsDouble(parameters, self.Y_VALUE, context)
        # Output file
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context, 
                                    the_layer.fields(), output_wkb, the_layer.sourceCrs())
        if sink is None:
            raise QgsProcessingException(self.invalidSinkError(parameters, self.OUTPUT))

        total = 100.0 / the_layer.featureCount() if the_layer.featureCount() else 0
        features = the_layer.getFeatures()
        for current, f in enumerate(features):
            if feedback.isCanceled():
                break

            # Copy attributes
            fz = QgsFeature()
            fz.setAttributes(f.attributes())

            # Get geometry
            geom = f.geometry()
            wkt = geom.asWkt()
            typ = wkt.split(" ")[0].strip()
            if typ in self._wktdef:
                nwkt = self._wktdef[typ](wkt)
            else:
                # Unrecognised geometry type
                raise ValueError('Unrecognised geometry type')

            fz.setGeometry(QgsGeometry.fromWkt(nwkt))

            # Store output feature
            sink.addFeature(fz, QgsFeatureSink.FastInsert)
            feedback.setProgress(int(current * total))

        return {self.OUTPUT:dest_id}
    #-------------------------------------------------------------------------------------

    def get_error(self):
        ''' Return the error value. '''
        #
        return self.tr(self._error)
    #-------------------------------------------------------------------------------------

    def icon(self):
        ''' Returns a QIcon for the algorithm. '''
        #
        return QIcon(os.path.join(os.path.join(plugin_path, 'res', self._ico+'.svg')))
    #-------------------------------------------------------------------------------------

    def svgIconPath(self):
        ''' Returns a path to an SVG version of the algorithm's icon. '''
        #
        return QIcon(os.path.join(os.path.join(plugin_path, 'res', self._ico+'.svg')))
    #-------------------------------------------------------------------------------------

    def helpUrl(self):
        ''' Returns a url pointing to the algorithm's help page. '''
        #
        return the_url
    #-------------------------------------------------------------------------------------

    def shortHelpString(self):
        ''' Returns a localised short helper string for the algorithm. '''
        #
        return self.tr(help_string)
    #-------------------------------------------------------------------------------------

    def name(self):
        '''
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        '''
        return 'bcSwapYZ3'
    #-------------------------------------------------------------------------------------

    def displayName(self):
        '''
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        '''
        return self.tr(self._the_strings["ALGONAME"])
    #-------------------------------------------------------------------------------------

    def tags(self):
        return self.tr(the_tags)
    #-------------------------------------------------------------------------------------

    def group(self):
        '''
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        '''
        return str(self.groupId()).capitalize()
    #-------------------------------------------------------------------------------------

    def groupId(self):
        '''
        One of: composer, layer, query, raster, survey, vector
        '''
        return 'vector'
    #-------------------------------------------------------------------------------------

    def tr(self, string):
        ''' No translation of strings. '''
        #
        return string
    #-------------------------------------------------------------------------------------

    def createInstance(self):
        ''' Creates a new instance of the algorithm class. '''
        #
        return bcSwapYZAlgorithm()
    #-------------------------------------------------------------------------------------